<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java常用类</title>
    <link href="/2022/09/10/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2022/09/10/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h1><h1 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h1><p><strong>内部类概念：</strong> 在一个类的内部在定义一个完整的类</p><p><strong>特点：</strong></p><ul><li><p>编译之后可生成独立的字节码文件</p></li><li><p>内部类可直接访问外部类的私用成员，而不破坏封装</p></li><li><p>&#96;&#96;&#96;java<br>public class Body{<br>private  String name;<br>class Header{<br>    public void show(){<br>        System.out.println(name);<br>    }<br>}<br>}</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">    * 内部类可为外部类提供一些必要的内部功能组件&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zikers&#x2F;image_store&#x2F;main&#x2F;img&#x2F;202209111845260.png&quot; alt&#x3D;&quot;image-20220910192710655&quot; style&#x3D;&quot;zoom:150%;&quot; &#x2F;&gt;## **1. 成员内部类*** 一个类在另一个类当中，作为这个类的一个成员而存在* 在类的内部定义，与实例变量、实例方法同级别的类* 外部类的一个实例部分，创建内部类对象时，必须依赖外部类对象&#96;&#96;&#96;javapublic class Outer &#123;    &#x2F;&#x2F;实例变量    private String name &#x3D; &quot;李四&quot;;    private int age &#x3D; 12;    &#x2F;&#x2F;内部类    class Inner&#123;        private String address &#x3D; &quot;北京&quot;;        private String phone &#x3D; &quot;1111&quot;;        &#x2F;&#x2F;方法        public void show()&#123;            System.out.println(name);            System.out.println(age);            System.out.println(address);            System.out.println(phone);        &#125;    &#125;    public static void main(String[] args) &#123;&#x2F;&#x2F;        &#x2F;&#x2F;1.创建外部类对象&#x2F;&#x2F;        Outer outer &#x3D; new Outer();&#x2F;&#x2F;        &#x2F;&#x2F;2.创建内部类对象&#x2F;&#x2F;        Outer.Inner inner &#x3D; outer.new Inner();&#x2F;&#x2F;        inner.show();        Outer.Inner inner &#x3D; new Outer().new Inner();&#x2F;&#x2F;这样也可以        inner.show();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209111919563.png" alt="image-20220911191917434"></p><ul><li>当内部类与外部类属性变量重名时，首先访问的是内部类的变量。<ul><li>想访问外部类同名属性时，加入外部类 Class.this.name即可</li><li>当不重名时，也可以加上，调用更加明确，易懂</li></ul></li><li>成员内部类中不能定义静态成员<ul><li>即在内部类中定义 <code>private static String name = &quot;李四&quot;</code>  会报错</li><li>但是加上 <code>final</code> 就可以了，比较特殊    静态常量可以定义</li></ul></li></ul><h2 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a><strong>2. 静态内部类</strong></h2><ul><li><p>static   静态内部类</p></li><li><p>不依赖外部类对象，可直接创建或通过类名访问，可声明静态成员</p></li></ul><h2 id="3-局部内部类"><a href="#3-局部内部类" class="headerlink" title="3. 局部内部类"></a><strong>3. 局部内部类</strong></h2><ul><li>一个类定义在方法内部</li></ul><h2 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="4. 匿名内部类"></a><strong>4. 匿名内部类</strong></h2><ul><li>一种特殊内部类，没有名字，在使用接口和抽象类时使用</li></ul><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first-blog</title>
    <link href="/2022/09/10/first-blog/"/>
    <url>/2022/09/10/first-blog/</url>
    
    <content type="html"><![CDATA[<p>开始了自己的写博客之路。愿坚持不懈，学有所成。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
