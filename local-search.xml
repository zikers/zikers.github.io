<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>class中_init_()方法详解</title>
    <link href="/2022/09/17/class%E4%B8%AD_init_()%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/09/17/class%E4%B8%AD_init_()%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="init-详解"><a href="#init-详解" class="headerlink" title="__ init __()详解"></a>__ init __()详解</h1><h1 id="1-init-是什么"><a href="#1-init-是什么" class="headerlink" title="1._ init _()是什么"></a>1._ <em>init</em> _()是什么</h1><ul><li>跟java中类的构造函数类似。能够对类中成员进行初始化操作</li><li>在实例化时，可直接用类似构造函数的形式赋值</li></ul><p><strong>init()方法有两个方面的重大意义：</strong></p><p>​<strong>1. 在对象生命周期中初始化；每个对象必须正确初始化后才能正常工作。</strong></p><p>​<strong>2. init()参数值可以有多种形式。</strong></p><h1 id="2-代码实例"><a href="#2-代码实例" class="headerlink" title="2.代码实例"></a>2.代码实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_id, name, age</span>):<br>        self.num_id = num_id<br>        self.name = name<br>        self.age = age<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name)<br>        <span class="hljs-built_in">print</span>(self.age)<br><br><br>s1 = Student(<span class="hljs-number">123</span>, <span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">21</span>)<br>s1.print_info()<br></code></pre></td></tr></table></figure><p>本人初学者，总结以下几点：</p><ul><li><p>init()函数不是必须要写的</p></li><li><p>定义的init()函数相当于java的构造函数，可直接像上述代码<code>s1 = Student(123, &quot;tom&quot;, 21)</code> 这样实例化使用。没有的话，就不能这样初始化赋值</p></li><li><p>以<code>self.num_id = num_id</code>为例。是没有强制要求等号前后的名称必须一致的。self.xxx这里是类中的成员变量，而等号后的xxx是传进来的参数。为了好记和增强可读性，才会如此。</p></li><li><p>另外，__ init() __函数在创建对象时，是自动调用的。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_id, name, age</span>):<br>        self.num_id = num_id<br>        self.name = name<br>        self.age = age<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span> + self.name + <span class="hljs-string">&quot;!&quot;</span>)<br><br>s1 = Student(<span class="hljs-number">123</span>, <span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">21</span>)<br>//输出<br>//hellotom!           <br></code></pre></td></tr></table></figure><p>在创建对象时，调用init()，打印了helloxxx。当然，实际中是不建议这样操作的，我们可以写一个方法来实现类似功能。</p><p>那么用或者不用__ init __的区别在哪里呢？</p><ul><li>当使用这个“构造函数”时，可以在创建对象时自动初始化。如果不用时，就只能通过对象.属性进行赋值操作了。</li><li>有构造函数初始化时，必须进行传值操作，否则就会报错。而无构造函数时，可以是一个空结构，随着输入赋值而添加相应数据</li></ul><p><strong>注：</strong>__ dict __  可打印所有成员变量的字典格式</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>类与对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python类学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用类</title>
    <link href="/2022/09/10/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2022/09/10/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h1><h1 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h1><p><strong>内部类概念：</strong> 在一个类的内部在定义一个完整的类</p><p><strong>特点：</strong></p><ul><li><p>编译之后可生成独立的字节码文件</p></li><li><p>内部类可直接访问外部类的私用成员，而不破坏封装</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Body</span>&#123;<br>    <span class="hljs-keyword">private</span>  String name;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内部类可为外部类提供一些必要的内部功能组件</li></ul><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209111845260.png" alt="image-20220910192710655" style="zoom:150%;" /><h2 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1. 成员内部类"></a><strong>1. 成员内部类</strong></h2><ul><li><p>一个类在另一个类当中，作为这个类的一个成员而存在</p></li><li><p>在类的内部定义，与实例变量、实例方法同级别的类</p></li><li><p>外部类的一个实例部分，创建内部类对象时，必须依赖外部类对象</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-comment">//实例变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;李四&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><br>    <span class="hljs-comment">//内部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;北京&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1111&quot;</span>;<br><br>        <span class="hljs-comment">//方法</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(name);<br>            System.out.println(age);<br>            System.out.println(address);<br>            System.out.println(phone);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        //1.创建外部类对象</span><br><span class="hljs-comment">//        Outer outer = new Outer();</span><br><span class="hljs-comment">//        //2.创建内部类对象</span><br><span class="hljs-comment">//        Outer.Inner inner = outer.new Inner();</span><br><span class="hljs-comment">//        inner.show();</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<span class="hljs-comment">//这样也可以</span><br>        inner.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209111919563.png" alt="image-20220911191917434"></p><ul><li>当内部类与外部类属性变量重名时，首先访问的是内部类的变量。<ul><li>想访问外部类同名属性时，加入外部类 Class.this.name即可</li><li>当不重名时，也可以加上，调用更加明确，易懂</li></ul></li><li>成员内部类中不能定义静态成员<ul><li>即在内部类中定义 <code>private static String name = &quot;李四&quot;</code>  会报错</li><li>但是加上 <code>final</code> 就可以了，比较特殊    静态常量可以定义</li></ul></li></ul><h2 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a><strong>2. 静态内部类</strong></h2><ul><li><p>static   静态内部类</p></li><li><p>不依赖外部类对象，可直接创建或通过类名访问，可声明静态成员</p></li><li><p>外部类不能加static</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//外部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sss&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br>    <span class="hljs-comment">//静态内部类，和外部类相同，同等地位</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner1</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;河南&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;11111&quot;</span>;<br>        <span class="hljs-comment">//静态成员</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">//1.调用外部类属性</span><br>            <span class="hljs-comment">//需要先创建外部类对象  把静态类看作和外部类平行的另一个外部类</span><br>            <span class="hljs-type">Outer1</span> <span class="hljs-variable">outer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer1</span>();<br>            System.out.println(outer1.name);<br>            System.out.println(outer1.age);<br><br>            <span class="hljs-comment">//2.调用静态内部类</span><br>            System.out.println(address);<br>            System.out.println(phone);<br><br>            <span class="hljs-comment">//3.调用静态类的静态属性</span><br>            <span class="hljs-comment">//通过类名.属性名调用</span><br>            System.out.println(Inner1.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//因为静态内部类与外部类地位相同，故直接创建内部类对象</span><br>        <span class="hljs-comment">//不需要像成员内部类那样先创建外部类对象</span><br>        <span class="hljs-comment">//以下Outer.Inner1  .仅表示包含所属关系  并没有new Outer1()</span><br>        Outer1.<span class="hljs-type">Inner1</span> <span class="hljs-variable">inner1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer1</span>.Inner1();<br>        <span class="hljs-comment">//调用放法</span><br>        inner1.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209112048761.png" alt="image-20220911204821289"></p><h2 id="3-局部内部类"><a href="#3-局部内部类" class="headerlink" title="3. 局部内部类"></a><strong>3. 局部内部类</strong></h2><ul><li>一个类定义在方法内部</li><li>定义在外部类方法中，作用范围和创建对象范围仅限于当前方法</li><li>局部内部类访问外部类当前方法中的局部变量时，无法保证变量的声明周期与自身相同，变量必须修饰为final<ul><li>jdk17以后 会自动加</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小明&quot;</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//定义局部变量</span><br>       <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;深圳&quot;</span>;<br>       <span class="hljs-comment">//定义局部内部类</span><br>       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>           <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>           <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345@qq.com&quot;</span>;<br>           <span class="hljs-comment">//定义局部类的方法</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show2</span><span class="hljs-params">()</span>&#123;<br>               <span class="hljs-comment">//访问外部类的属性</span><br>               System.out.println(name);<br>               System.out.println(age);<br>               <span class="hljs-comment">//访问内部类属性</span><br>               System.out.println(phone);<br>               System.out.println(email);<br>               <span class="hljs-comment">//访问局部变量 jdk1.7时，要求变量必须是常量，之后版本可省略</span><br>               System.out.println(address);<br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">//如果没有以下两行代码，这样不会有任何输出结果</span><br>       <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>       inner.show2();<br>   &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        outer.show();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209121257779.png" alt="image-20220912125750346"></p><h2 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="4. 匿名内部类"></a><strong>4. 匿名内部类</strong></h2><ul><li>一种特殊内部类，没有名字，在使用接口和抽象类时使用</li><li>没有类名的局部内部类 （一切特征 与局部内部类相同）</li><li>必须继承一个父类，或者实现一个接口</li></ul><h1 id="二、Object类"><a href="#二、Object类" class="headerlink" title="二、Object类"></a>二、Object类</h1><ul><li>超类、基类，所有类的直接间接父类，位于继承树的最顶层</li><li>任何类，如果没有书写extends显示继承某个类，都默认继承的是Object类，否则为间接继承</li><li>Object类所定义的方法，为所有对象都具备的方法</li><li>Object 类型可以存储任何对象<ul><li>作为参数，接受任何对象 </li><li>作为返回值，可以返回任何对象</li></ul></li></ul><h2 id="1-getclass-方法"><a href="#1-getclass-方法" class="headerlink" title="1. getclass()方法"></a>1. getclass()方法</h2><p>返回引用中存储的实际对象类型。可以应用在判断两个引用中实际存储的对象类型是否一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">11</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-number">21</span>);<br>    <span class="hljs-comment">//System.out.println(s1.getClass());</span><br>    <span class="hljs-comment">//System.out.println(s2.getClass());</span><br>    <span class="hljs-keyword">if</span>(s1.getClass() == s2.getClass())<br>        System.out.println(<span class="hljs-string">&quot;同一个类型&quot;</span>);<br>&#125;<br><span class="hljs-comment">//输出为同一类型</span><br></code></pre></td></tr></table></figure><h2 id="2-hashCode-方法"><a href="#2-hashCode-方法" class="headerlink" title="2. hashCode()方法"></a>2. hashCode()方法</h2><ul><li>返回类型为int型</li><li>返回该对象的哈希码值</li><li>哈希值是根据对象的地址或字符串、数字使用hash算法计算出来的int型数值</li><li>一般请款下相同对象返回相同哈希码<ul><li>所以以此来判断两个对象是否为同一个</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">11</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-number">21</span>);<br>    System.out.println(s1.hashCode());<br>    System.out.println(s2.hashCode());<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s2;<br>    System.out.println(s3.hashCode());<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1915318863</span> <span class="hljs-comment">//s1</span><br><span class="hljs-number">1283928880</span> <span class="hljs-comment">//s2</span><br><span class="hljs-number">1283928880</span> <span class="hljs-comment">//s3</span><br></code></pre></td></tr></table></figure><p>由上可以看出 s2,s3是一个</p><h2 id="3-toString-方法"><a href="#3-toString-方法" class="headerlink" title="3. toString() 方法"></a>3. toString() 方法</h2><ul><li><p>返回类型为字符串形式</p></li><li><p>可以根据程序需求覆盖该方法(重写)</p></li><li><p>展示为包类名@地址</p></li></ul><p> &#x2F;&#x2F;记录快速生成方法快捷键 ： alt+insert</p><h2 id="4-eaquals-方法"><a href="#4-eaquals-方法" class="headerlink" title="4. eaquals()方法"></a>4. eaquals()方法</h2><ul><li>放回布尔类型</li><li>比较对象地址是否相同</li><li>对其进行重写，判断两个对象内容是否一致</li></ul><h2 id="5-finalize-方法"><a href="#5-finalize-方法" class="headerlink" title="5.finalize()方法"></a>5.finalize()方法</h2><ul><li>比较特殊，自己不会调用</li><li>当对象背判定为垃圾对象时，JVM自动调用 此方法，用以标记垃圾对象，进入回收队列</li><li>垃圾对象：没有有效引用指向此对象，为垃圾对象</li><li>垃圾回收：由GC销毁垃圾对象，释放数据存储空间</li></ul><h1 id="三、包装类"><a href="#三、包装类" class="headerlink" title="三、包装类"></a>三、包装类</h1><h2 id="1-包装类概述"><a href="#1-包装类概述" class="headerlink" title="1.包装类概述"></a>1.包装类概述</h2><p><strong>Java八个基本类型</strong>（四类八种）</p><ul><li><p>整型（4个）： byte、short、int、long</p></li><li><p>浮点型（2个）：float、double</p></li><li><p>字符（1个）： char</p></li><li><p>布尔类型:（1个）： boolean</p></li></ul><p>程序运行两个空间，一个堆，一个栈，基本类型都存在于栈中，引用类型数据在堆中。栈中存对象的地址</p><p><strong>包装类：</strong></p><ul><li>基本数据类型所对应的引用数据类型</li><li>Object可统一所有数据，包装类的默认值为null</li></ul><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209152008480.png" alt="image-20220915200838013"></p><h2 id="2-类型转换和装箱、拆箱"><a href="#2-类型转换和装箱、拆箱" class="headerlink" title="2.类型转换和装箱、拆箱"></a>2.类型转换和装箱、拆箱</h2><p><strong>装箱</strong>：一个基本类型数据（在栈中），要把它转化为引用类型（放入堆中），这种转化操作叫做装箱</p><p><strong>拆箱</strong>：与上述装箱操作相反</p><p><strong>在jdk1.5之前，只能进行如下操作，进行装箱和拆箱，在jdk1.5之后，就可以进行自动装箱拆箱操作，使代码更加的简洁。</strong></p><p><em>jdk1.5之前：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//进行装箱：基本类型转化为引用类型的操作</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(num);<span class="hljs-comment">//方法1</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(num);<span class="hljs-comment">//方法2</span><br>        System.out.println(integer);<br>        System.out.println(integer1);<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);<br>        <br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//进行拆箱：将引用类型转化为基本类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> integer2.intValue();<br>        System.out.println(num1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>jdk1.5之后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> num;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> integer2;<br></code></pre></td></tr></table></figure><p>直接这样复制即可，不用像之前那样调用方法。但是在运行时，是在动将方法调用了的。<strong>反汇编的代码和jdk1.5之前相同。</strong></p><p>自动装箱其实调用了 Integer.valueof()方法</p><h2 id="3-基本类型与字符串之间转换"><a href="#3-基本类型与字符串之间转换" class="headerlink" title="3.基本类型与字符串之间转换"></a>3.基本类型与字符串之间转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//1.基本类型转化为字符串</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> n1 + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//方法1：直接加引号转变为字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Integer.toString(n1);<span class="hljs-comment">//使用Integer封装的方法</span><br>        System.out.println(s1);<br>        System.out.println(s2);<br><br>        <span class="hljs-comment">//2.字符串转化为基本类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;150&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str);<span class="hljs-comment">//使用封装的parsexxx()方法</span><br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>其实转换时均是使用了包装类型里的方法。包装类型里提供了转化为其他类型的方法。</p><p><strong>特殊的布尔类型转换如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//boolean字符串形式转化为基本类型 “true”--&gt;true  非true均转为false</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ture&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(s);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(s1);<br>        System.out.println(b);<br>        System.out.println(b1);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//true</span><br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong> 当要转换的字符串为true时，其转换为布尔类型为true;当是除了true的其他字符串时，转换为布尔类型均为false。</p><h2 id="4-Integer缓冲区问题"><a href="#4-Integer缓冲区问题" class="headerlink" title="4.Integer缓冲区问题"></a>4.Integer缓冲区问题</h2><ul><li>Java预先创建了 256个常用的整数包装类型对象</li><li>在实际应用过程中，对已创建的对象进行复用。</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first-blog</title>
    <link href="/2022/09/10/first-blog/"/>
    <url>/2022/09/10/first-blog/</url>
    
    <content type="html"><![CDATA[<p>开始了自己的写博客之路。愿坚持不懈，学有所成。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>奋发图强！！！</p>]]></content>
    
  </entry>
  
  
  
</search>
