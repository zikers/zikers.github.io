<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java常用类</title>
      <link href="/2022/09/10/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2022/09/10/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h1><h1 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h1><p><strong>内部类概念：</strong> 在一个类的内部在定义一个完整的类</p><p><strong>特点：</strong></p><ul><li><p>编译之后可生成独立的字节码文件</p></li><li><p>内部类可直接访问外部类的私用成员，而不破坏封装</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Body</span>&#123;<br>    <span class="hljs-keyword">private</span>  String name;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内部类可为外部类提供一些必要的内部功能组件</li></ul><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209111845260.png" alt="image-20220910192710655" style="zoom:150%;" /><h2 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1. 成员内部类"></a><strong>1. 成员内部类</strong></h2><ul><li><p>一个类在另一个类当中，作为这个类的一个成员而存在</p></li><li><p>在类的内部定义，与实例变量、实例方法同级别的类</p></li><li><p>外部类的一个实例部分，创建内部类对象时，必须依赖外部类对象</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-comment">//实例变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;李四&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><br>    <span class="hljs-comment">//内部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;北京&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1111&quot;</span>;<br><br>        <span class="hljs-comment">//方法</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(name);<br>            System.out.println(age);<br>            System.out.println(address);<br>            System.out.println(phone);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        //1.创建外部类对象</span><br><span class="hljs-comment">//        Outer outer = new Outer();</span><br><span class="hljs-comment">//        //2.创建内部类对象</span><br><span class="hljs-comment">//        Outer.Inner inner = outer.new Inner();</span><br><span class="hljs-comment">//        inner.show();</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<span class="hljs-comment">//这样也可以</span><br>        inner.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209111919563.png" alt="image-20220911191917434"></p><ul><li>当内部类与外部类属性变量重名时，首先访问的是内部类的变量。<ul><li>想访问外部类同名属性时，加入外部类 Class.this.name即可</li><li>当不重名时，也可以加上，调用更加明确，易懂</li></ul></li><li>成员内部类中不能定义静态成员<ul><li>即在内部类中定义 <code>private static String name = &quot;李四&quot;</code>  会报错</li><li>但是加上 <code>final</code> 就可以了，比较特殊    静态常量可以定义</li></ul></li></ul><h2 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a><strong>2. 静态内部类</strong></h2><ul><li><p>static   静态内部类</p></li><li><p>不依赖外部类对象，可直接创建或通过类名访问，可声明静态成员</p></li><li><p>外部类不能加static</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//外部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sss&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br>    <span class="hljs-comment">//静态内部类，和外部类相同，同等地位</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner1</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;河南&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;11111&quot;</span>;<br>        <span class="hljs-comment">//静态成员</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">//1.调用外部类属性</span><br>            <span class="hljs-comment">//需要先创建外部类对象  把静态类看作和外部类平行的另一个外部类</span><br>            <span class="hljs-type">Outer1</span> <span class="hljs-variable">outer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer1</span>();<br>            System.out.println(outer1.name);<br>            System.out.println(outer1.age);<br><br>            <span class="hljs-comment">//2.调用静态内部类</span><br>            System.out.println(address);<br>            System.out.println(phone);<br><br>            <span class="hljs-comment">//3.调用静态类的静态属性</span><br>            <span class="hljs-comment">//通过类名.属性名调用</span><br>            System.out.println(Inner1.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//因为静态内部类与外部类地位相同，故直接创建内部类对象</span><br>        <span class="hljs-comment">//不需要像成员内部类那样先创建外部类对象</span><br>        <span class="hljs-comment">//以下Outer.Inner1  .仅表示包含所属关系  并没有new Outer1()</span><br>        Outer1.<span class="hljs-type">Inner1</span> <span class="hljs-variable">inner1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer1</span>.Inner1();<br>        <span class="hljs-comment">//调用放法</span><br>        inner1.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209112048761.png" alt="image-20220911204821289"></p><h2 id="3-局部内部类"><a href="#3-局部内部类" class="headerlink" title="3. 局部内部类"></a><strong>3. 局部内部类</strong></h2><ul><li>一个类定义在方法内部</li><li>定义在外部类方法中，作用范围和创建对象范围仅限于当前方法</li><li>局部内部类访问外部类当前方法中的局部变量时，无法保证变量的声明周期与自身相同，变量必须修饰为final<ul><li>jdk17以后 会自动加</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小明&quot;</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//定义局部变量</span><br>       <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;深圳&quot;</span>;<br>       <span class="hljs-comment">//定义局部内部类</span><br>       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>           <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>           <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345@qq.com&quot;</span>;<br>           <span class="hljs-comment">//定义局部类的方法</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show2</span><span class="hljs-params">()</span>&#123;<br>               <span class="hljs-comment">//访问外部类的属性</span><br>               System.out.println(name);<br>               System.out.println(age);<br>               <span class="hljs-comment">//访问内部类属性</span><br>               System.out.println(phone);<br>               System.out.println(email);<br>               <span class="hljs-comment">//访问局部变量 jdk1.7时，要求变量必须是常量，之后版本可省略</span><br>               System.out.println(address);<br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">//如果没有以下两行代码，这样不会有任何输出结果</span><br>       <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>       inner.show2();<br>   &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        outer.show();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zikers/image_store/main/img/202209121257779.png" alt="image-20220912125750346"></p><h2 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="4. 匿名内部类"></a><strong>4. 匿名内部类</strong></h2><ul><li>一种特殊内部类，没有名字，在使用接口和抽象类时使用</li><li>没有类名的局部内部类 （一切特征 与局部内部类相同）</li><li>必须继承一个父类，或者实现一个接口</li></ul><h1 id="二、Object类"><a href="#二、Object类" class="headerlink" title="二、Object类"></a>二、Object类</h1><ul><li>超类、基类，所有类的直接间接父类，位于继承树的最顶层</li><li>任何类，如果没有书写extends显示继承某个类，都默认继承的是Object类，否则为间接继承</li><li>Object类所定义的方法，为所有对象都具备的方法</li><li>Object 类型可以存储任何对象<ul><li>作为参数，接受任何对象 </li><li>作为返回值，可以返回任何对象</li></ul></li></ul><h2 id="1-getclass-方法"><a href="#1-getclass-方法" class="headerlink" title="1. getclass()方法"></a>1. getclass()方法</h2><p>返回引用中存储的实际对象类型。可以应用在判断两个引用中实际存储的对象类型是否一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">11</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-number">21</span>);<br>    <span class="hljs-comment">//System.out.println(s1.getClass());</span><br>    <span class="hljs-comment">//System.out.println(s2.getClass());</span><br>    <span class="hljs-keyword">if</span>(s1.getClass() == s2.getClass())<br>        System.out.println(<span class="hljs-string">&quot;同一个类型&quot;</span>);<br>&#125;<br><span class="hljs-comment">//输出为同一类型</span><br></code></pre></td></tr></table></figure><h2 id="2-hashCode-方法"><a href="#2-hashCode-方法" class="headerlink" title="2. hashCode()方法"></a>2. hashCode()方法</h2><ul><li>返回类型为int型</li><li>返回该对象的哈希码值</li><li>哈希值是根据对象的地址或字符串、数字使用hash算法计算出来的int型数值</li><li>一般请款下相同对象返回相同哈希码<ul><li>所以以此来判断两个对象是否为同一个</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">11</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-number">21</span>);<br>    System.out.println(s1.hashCode());<br>    System.out.println(s2.hashCode());<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s2;<br>    System.out.println(s3.hashCode());<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1915318863</span> <span class="hljs-comment">//s1</span><br><span class="hljs-number">1283928880</span> <span class="hljs-comment">//s2</span><br><span class="hljs-number">1283928880</span> <span class="hljs-comment">//s3</span><br></code></pre></td></tr></table></figure><p>由上可以看出 s2,s3是一个</p><h2 id="3-toString-方法"><a href="#3-toString-方法" class="headerlink" title="3. toString() 方法"></a>3. toString() 方法</h2><ul><li><p>返回类型为字符串形式</p></li><li><p>可以根据程序需求覆盖该方法(重写)</p></li><li><p>展示为包类名@地址</p></li></ul><p> &#x2F;&#x2F;记录快速生成方法快捷键 ： alt+insert</p><h2 id="4-eaquals-方法"><a href="#4-eaquals-方法" class="headerlink" title="4. eaquals()方法"></a>4. eaquals()方法</h2><ul><li>放回布尔类型</li><li>比较对象地址是否相同</li><li>对其进行重写，判断两个对象内容是否一致</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first-blog</title>
      <link href="/2022/09/10/first-blog/"/>
      <url>/2022/09/10/first-blog/</url>
      
        <content type="html"><![CDATA[<p>开始了自己的写博客之路。愿坚持不懈，学有所成。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
